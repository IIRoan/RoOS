---
name: Build and Release
on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Release tag (e.g., v1.0.0)"
        required: true
        type: string
      stream_name:
        description: "The Fedora Version: gts, stable, or latest"
        required: true
        default: "stable"
        type: choice
        options:
          - "gts"
          - "stable"
          - "latest"
      build_type:
        description: "What to build"
        required: true
        default: "both"
        type: choice
        options:
          - "both"
          - "container-only"
          - "iso-only"

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-images:
    name: Build and Push Images
    if: inputs.build_type == 'both' || inputs.build_type == 'container-only'
    uses: ./.github/workflows/reusable-build.yml
    with:
      image_flavors: '["main", "nvidia", "nvidia-open"]'
      brand_name: "bluefin"
      stream_name: ${{ inputs.stream_name }}
    secrets: inherit

  build-isos-both:
    name: Build ISOs (After Container Build)
    if: inputs.build_type == 'both'
    needs: build-images
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        platform: [amd64]
        flavor: ["main", "nvidia-open"]
        image_version: ["${{ inputs.stream_name }}"]
    permissions:
      contents: read
      packages: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Setup Just
        uses: extractions/setup-just@e33e0265a09d6d736e2ee1e0eb685ef1de4669ff # v3

      - name: Format image ref
        id: image_ref
        env:
          FLAVOR: ${{ matrix.flavor }}
        run: |
          set -eoux pipefail          
          image_name=$(just image_name "bluefin" "${{ matrix.image_version}}" "${{ matrix.flavor}}")
          image_ref="${IMAGE_REGISTRY}/${image_name}"
          image_ref=$(echo "$image_ref" | tr '[:upper:]' '[:lower:]')
          KARGS="NONE"
          echo "image_ref=$image_ref" >> "${GITHUB_OUTPUT}"
          echo "artifact_format="$image_name-${{ matrix.image_version }}-$(uname -m)"" >> "${GITHUB_OUTPUT}"
          echo "kargs=$KARGS" >> "${GITHUB_OUTPUT}"

      - name: Build ISO
        id: build
        uses: ublue-os/titanoboa@main
        with:
          image-ref: ${{ steps.image_ref.outputs.image_ref }}:${{ matrix.image_version }}
          flatpaks-list: ${{ github.workspace }}/iso_files/system-flatpaks.list
          hook-post-rootfs: ${{ github.workspace }}/iso_files/configure_iso_anaconda.sh
          kargs: ${{ steps.image_ref.outputs.kargs }}

      - name: Rename ISO
        id: rename
        env:
          OUTPUT_PATH: ${{ steps.build.outputs.iso-dest }}
          FLAVOR: ${{ matrix.flavor }}
          OUTPUT_NAME: ${{ steps.image_ref.outputs.artifact_format }}
          IMAGE_VERSION: ${{ matrix.image_version }}
        run: |
          set -x
          mkdir -p output
          OUTPUT_DIRECTORY="$(realpath output)"
          sha256sum "${OUTPUT_PATH}" | tee "${OUTPUT_DIRECTORY}/${OUTPUT_NAME}.iso-CHECKSUM"
          mv "${OUTPUT_PATH}" "${OUTPUT_DIRECTORY}/${OUTPUT_NAME}.iso"
          echo "output_directory=$OUTPUT_DIRECTORY" >> "${GITHUB_OUTPUT}"

      - name: Upload to Job Artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ steps.image_ref.outputs.artifact_format }}
          if-no-files-found: error
          path: ${{ steps.rename.outputs.output_directory }}

  build-isos-only:
    name: Build ISOs (Standalone)
    if: inputs.build_type == 'iso-only'
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        platform: [amd64]
        flavor: ["main", "nvidia-open"]
        image_version: ["${{ inputs.stream_name }}"]
    permissions:
      contents: read
      packages: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Setup Just
        uses: extractions/setup-just@e33e0265a09d6d736e2ee1e0eb685ef1de4669ff # v3

      - name: Format image ref
        id: image_ref
        env:
          FLAVOR: ${{ matrix.flavor }}
        run: |
          set -eoux pipefail          
          image_name=$(just image_name "bluefin" "${{ matrix.image_version}}" "${{ matrix.flavor}}")
          image_ref="${IMAGE_REGISTRY}/${image_name}"
          image_ref=$(echo "$image_ref" | tr '[:upper:]' '[:lower:]')
          KARGS="NONE"
          echo "image_ref=$image_ref" >> "${GITHUB_OUTPUT}"
          echo "artifact_format="$image_name-${{ matrix.image_version }}-$(uname -m)"" >> "${GITHUB_OUTPUT}"
          echo "kargs=$KARGS" >> "${GITHUB_OUTPUT}"

      - name: Build ISO
        id: build
        uses: ublue-os/titanoboa@main
        with:
          image-ref: ${{ steps.image_ref.outputs.image_ref }}:${{ matrix.image_version }}
          flatpaks-list: ${{ github.workspace }}/iso_files/system-flatpaks.list
          hook-post-rootfs: ${{ github.workspace }}/iso_files/configure_iso_anaconda.sh
          kargs: ${{ steps.image_ref.outputs.kargs }}

      - name: Rename ISO
        id: rename
        env:
          OUTPUT_PATH: ${{ steps.build.outputs.iso-dest }}
          FLAVOR: ${{ matrix.flavor }}
          OUTPUT_NAME: ${{ steps.image_ref.outputs.artifact_format }}
          IMAGE_VERSION: ${{ matrix.image_version }}
        run: |
          set -x
          mkdir -p output
          OUTPUT_DIRECTORY="$(realpath output)"
          sha256sum "${OUTPUT_PATH}" | tee "${OUTPUT_DIRECTORY}/${OUTPUT_NAME}.iso-CHECKSUM"
          mv "${OUTPUT_PATH}" "${OUTPUT_DIRECTORY}/${OUTPUT_NAME}.iso"
          echo "output_directory=$OUTPUT_DIRECTORY" >> "${GITHUB_OUTPUT}"

      - name: Upload to Job Artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ steps.image_ref.outputs.artifact_format }}
          if-no-files-found: error
          path: ${{ steps.rename.outputs.output_directory }}

  create-release:
    name: Create Release
    if: always() && !cancelled()
    needs: [build-images, build-isos-both, build-isos-only]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Download all artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -la ./artifacts

      - name: Create release
        uses: softprops/action-gh-release@01570a1f39cb168c169c802c3bceb9e93fb10974 # v2
        with:
          tag_name: ${{ inputs.release_tag }}
          name: Release ${{ inputs.release_tag }}
          body: |
            ## RoOS Release ${{ inputs.release_tag }}
            
            This release includes:
            ${{ inputs.build_type == 'both' && '- Container images for ' || '' }}${{ inputs.build_type == 'both' && inputs.stream_name || '' }}${{ inputs.build_type == 'both' && ' stream' || '' }}
            ${{ (inputs.build_type == 'both' || inputs.build_type == 'iso-only') && '- Live ISO images for installation' || '' }}
            ${{ inputs.build_type == 'container-only' && '- Container images for ' || '' }}${{ inputs.build_type == 'container-only' && inputs.stream_name || '' }}${{ inputs.build_type == 'container-only' && ' stream' || '' }}
            
            ### Container Images
            ${{ inputs.build_type != 'iso-only' && 'Images are available at: `ghcr.io/' || '' }}${{ inputs.build_type != 'iso-only' && github.repository_owner || '' }}${{ inputs.build_type != 'iso-only' && '/bluefin:' || '' }}${{ inputs.build_type != 'iso-only' && inputs.stream_name || '' }}${{ inputs.build_type != 'iso-only' && '`' || '' }}
            
            ### ISO Images
            ${{ inputs.build_type != 'container-only' && 'Download the ISO files from the assets below to install RoOS on your system.' || '' }}
            
            Built from commit: ${{ github.sha }}
          files: ./artifacts/**/*
          draft: false
          prerelease: false