---
name: Build and Release
on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Release tag (e.g., v1.0.0)"
        required: true
        type: string
      stream_name:
        description: "The Fedora Version: gts, stable, or latest"
        required: true
        default: "stable"
        type: choice
        options:
          - "gts"
          - "stable"
          - "latest"
      build_type:
        description: "What to build"
        required: true
        default: "both"
        type: choice
        options:
          - "both"
          - "container-only"
          - "iso-only"

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-images:
    name: Build and Push Images
    if: inputs.build_type == 'both' || inputs.build_type == 'container-only'
    uses: ./.github/workflows/reusable-build.yml
    with:
      image_flavors: '["main", "nvidia", "nvidia-open"]'
      brand_name: "bluefin"
      stream_name: ${{ inputs.stream_name }}
    secrets: inherit

  trigger-iso-build:
    name: Trigger ISO Build
    if: inputs.build_type == 'both' || inputs.build_type == 'iso-only'
    needs: ${{ (inputs.build_type == 'both' && 'build-images') || '[]' }}
    runs-on: ubuntu-latest
    steps:
      - name: Trigger ISO Workflow
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'reusable-build-iso-anaconda.yml',
              ref: context.ref
            });
            
            // Wait a moment for the workflow to start
            await new Promise(resolve => setTimeout(resolve, 5000));
            
            // Wait for the workflow to complete
            let completed = false;
            let attempts = 0;
            const maxAttempts = 60; // 30 minutes max wait
            
            while (!completed && attempts < maxAttempts) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'reusable-build-iso-anaconda.yml',
                per_page: 1
              });
              
              if (runs.data.workflow_runs.length > 0) {
                const latestRun = runs.data.workflow_runs[0];
                if (latestRun.status === 'completed') {
                  completed = true;
                  console.log(`ISO build completed with conclusion: ${latestRun.conclusion}`);
                  if (latestRun.conclusion !== 'success') {
                    console.log(`Warning: ISO build failed with conclusion: ${latestRun.conclusion}`);
                    console.log(`ISO build URL: ${latestRun.html_url}`);
                    // Don't throw error - let the workflow continue for partial releases
                  }
                }
              }
              
              if (!completed) {
                await new Promise(resolve => setTimeout(resolve, 30000)); // Wait 30 seconds
                attempts++;
              }
            }
            
            if (!completed) {
              console.log('Warning: ISO build did not complete within timeout');
              // Don't throw error - let the workflow continue for partial releases
            }

  create-release:
    name: Create Release
    if: always() && !failure() && !cancelled()
    needs: [build-images, trigger-iso-build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Download all artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -la ./artifacts

      - name: Create release
        uses: softprops/action-gh-release@01570a1f39cb168c169c802c3bceb9e93fb10974 # v2
        with:
          tag_name: ${{ inputs.release_tag }}
          name: Release ${{ inputs.release_tag }}
          body: |
            ## RoOS Release ${{ inputs.release_tag }}
            
            This release includes:
            - Container images for ${{ inputs.stream_name }} stream
            - Live ISO images for installation
            
            ### Container Images
            Images are available at: `ghcr.io/${{ github.repository_owner }}/bluefin:${{ inputs.stream_name }}`
            
            ### ISO Images
            Download the ISO files from the assets below to install RoOS on your system.
            
            Built from commit: ${{ github.sha }}
          files: ./artifacts/**/*
          draft: false
          prerelease: false