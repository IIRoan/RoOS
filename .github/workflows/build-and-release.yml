---
name: Build and Release
on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Release tag (e.g., v1.0.0)"
        required: true
        type: string

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-containers:
    name: Build Container Images
    uses: ./.github/workflows/build-image-latest-main.yml
    secrets: inherit

  build-main-dx-iso:
    name: Build Main DX ISO
    needs: build-containers
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Setup Just
        uses: extractions/setup-just@e33e0265a09d6d736e2ee1e0eb685ef1de4669ff # v3

      - name: Format image ref
        id: image_ref
        run: |
          set -eoux pipefail          
          image_name=$(just image_name "bluefin-dx" "latest" "main")
          image_ref="${IMAGE_REGISTRY}/${image_name}"
          image_ref=$(echo "$image_ref" | tr '[:upper:]' '[:lower:]')
          echo "image_ref=$image_ref" >> "${GITHUB_OUTPUT}"
          echo "artifact_format=bluefin-dx-main-latest-$(uname -m)" >> "${GITHUB_OUTPUT}"

      - name: Build ISO
        id: build
        uses: ublue-os/titanoboa@main
        with:
          image-ref: ${{ steps.image_ref.outputs.image_ref }}:latest
          flatpaks-list: ${{ github.workspace }}/iso_files/system-flatpaks-dx.list
          hook-post-rootfs: ${{ github.workspace }}/iso_files/configure_iso_anaconda.sh
          kargs: "NONE"

      - name: Rename ISO
        id: rename
        env:
          OUTPUT_PATH: ${{ steps.build.outputs.iso-dest }}
          OUTPUT_NAME: ${{ steps.image_ref.outputs.artifact_format }}
        run: |
          set -x
          mkdir -p output
          OUTPUT_DIRECTORY="$(realpath output)"
          sha256sum "${OUTPUT_PATH}" | tee "${OUTPUT_DIRECTORY}/${OUTPUT_NAME}.iso-CHECKSUM"
          mv "${OUTPUT_PATH}" "${OUTPUT_DIRECTORY}/${OUTPUT_NAME}.iso"
          echo "output_directory=$OUTPUT_DIRECTORY" >> "${GITHUB_OUTPUT}"

      - name: Upload to Job Artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ steps.image_ref.outputs.artifact_format }}
          if-no-files-found: error
          path: ${{ steps.rename.outputs.output_directory }}

  build-nvidia-dx-iso:
    name: Build NVIDIA DX ISO
    needs: build-containers
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Setup Just
        uses: extractions/setup-just@e33e0265a09d6d736e2ee1e0eb685ef1de4669ff # v3

      - name: Format image ref
        id: image_ref
        run: |
          set -eoux pipefail          
          image_name=$(just image_name "bluefin-dx" "latest" "nvidia")
          image_ref="${IMAGE_REGISTRY}/${image_name}"
          image_ref=$(echo "$image_ref" | tr '[:upper:]' '[:lower:]')
          echo "image_ref=$image_ref" >> "${GITHUB_OUTPUT}"
          echo "artifact_format=bluefin-dx-nvidia-latest-$(uname -m)" >> "${GITHUB_OUTPUT}"

      - name: Build ISO
        id: build
        uses: ublue-os/titanoboa@main
        with:
          image-ref: ${{ steps.image_ref.outputs.image_ref }}:latest
          flatpaks-list: ${{ github.workspace }}/iso_files/system-flatpaks-dx.list
          hook-post-rootfs: ${{ github.workspace }}/iso_files/configure_iso_anaconda.sh
          kargs: "NONE"

      - name: Rename ISO
        id: rename
        env:
          OUTPUT_PATH: ${{ steps.build.outputs.iso-dest }}
          OUTPUT_NAME: ${{ steps.image_ref.outputs.artifact_format }}
        run: |
          set -x
          mkdir -p output
          OUTPUT_DIRECTORY="$(realpath output)"
          sha256sum "${OUTPUT_PATH}" | tee "${OUTPUT_DIRECTORY}/${OUTPUT_NAME}.iso-CHECKSUM"
          mv "${OUTPUT_PATH}" "${OUTPUT_DIRECTORY}/${OUTPUT_NAME}.iso"
          echo "output_directory=$OUTPUT_DIRECTORY" >> "${GITHUB_OUTPUT}"

      - name: Upload to Job Artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ steps.image_ref.outputs.artifact_format }}
          if-no-files-found: error
          path: ${{ steps.rename.outputs.output_directory }}

  create-release:
    name: Create Release
    needs: [build-containers, build-main-dx-iso, build-nvidia-dx-iso]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Download all artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -la ./artifacts

      - name: Create release
        uses: softprops/action-gh-release@01570a1f39cb168c169c802c3bceb9e93fb10974 # v2
        with:
          tag_name: ${{ inputs.release_tag }}
          name: Release ${{ inputs.release_tag }}
          body: |
            ## RoOS Release ${{ inputs.release_tag }}
            
            This release includes:
            - Container images for latest stream (main, nvidia, nvidia-open flavors)
            - Live ISO images for DX variants (main-dx and nvidia-dx)
            
            ### Container Images
            Images are available at: `ghcr.io/${{ github.repository_owner }}/bluefin:latest`
            
            ### ISO Images
            Download the ISO files from the assets below to install RoOS on your system:
            - `bluefin-dx-main-latest-x86_64.iso` - Main DX variant
            - `bluefin-dx-nvidia-latest-x86_64.iso` - NVIDIA DX variant
            
            Built from commit: ${{ github.sha }}
          files: ./artifacts/**/*
          draft: false
          prerelease: false